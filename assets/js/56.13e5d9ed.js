(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{683:function(s,e,n){"use strict";n.r(e);var a=n(16),t=Object(a.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"python-中-、-和-xx-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#python-中-、-和-xx-的区别"}},[s._v("#")]),s._v(' Python 中 "_"、"__" 和 "__xx__" 的区别')]),s._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"http://igorsobreira.com/2010/09/16/difference-between-one-underline-and-two-underlines-in-python.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("英文原文"),n("OutboundLink")],1)])]),s._v(" "),n("h2",{attrs:{id:"单下划线"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单下划线"}},[s._v("#")]),s._v(" "),n("code",[s._v("_")]),s._v("单下划线")]),s._v(" "),n("p",[s._v("Python中不存在真正的私有方法。为了实现类似于c++中私有方法，可以在类的方法或属性前加一个“_”单下划线，意味着该方法或属性不应该去调用，它并不属于API。")]),s._v(" "),n("p",[s._v("在使用property时，经常出现这个问题：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class BaseForm(StrAndUnicode):\n    ...\n    \n    def _get_errors(self):\n        "Returns an ErrorDict for the data provided for the form"\n        if self._errors is None:\n            self.full_clean()\n        return self._errors\n    \n    errors = property(_get_errors)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("上面的代码片段来自于django源码（django/forms/forms.py）。这里的errors是一个属性，属于API的一部分，但是_get_errors是私有的，是不应该访问的，但可以通过errors来访问该错误结果。")]),s._v(" "),n("h2",{attrs:{id:"双下划线"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#双下划线"}},[s._v("#")]),s._v(" "),n("code",[s._v("__")]),s._v("双下划线")]),s._v(" "),n("p",[s._v("这个双下划线更会造成更多混乱，但它并不是用来标识一个方法或属性是私有的，真正作用是用来避免子类覆盖其内容。")]),s._v(" "),n("p",[s._v("让我们来看一个例子：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class A(object): \n    def __method(self): \n        print "I\'m a method in A" \n    def method(self): \n        self.__method() a = A() a.method()\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("输出是这样的：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("$ python example.py \nI'm a method in A\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("很好，出现了预计的结果。")]),s._v(" "),n("p",[s._v("我们给A添加一个子类，并重新实现一个__method：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class B(A): \n    def __method(self): \n        print "I\'m a method in B" \n\nb = B() \nb.method()\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("现在，结果是这样的：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("$ python example.py\nI'm a method in A\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("就像我们看到的一样，B.method()不能调用B."),n("strong",[s._v('method的方法。实际上，它是"')]),s._v('"两个下划线的功能的正常显示。')]),s._v(" "),n("p",[s._v('因此，在我们创建一个以"__"两个下划线开始的方法时，这意味着这个方法不能被重写，它只允许在该类的内部中使用。')]),s._v(" "),n("p",[s._v("在Python中如是做的？很简单，它只是把方法重命名了，如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("a = A()\na._A__method()  # never use this!! please!\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("$ python example.py \nI'm a method in A\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("如果你试图调用a.__method，它还是无法运行的，就如上面所说，只可以在类的内部调用__method。")]),s._v(" "),n("h2",{attrs:{id:"xx-前后各双下划线"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#xx-前后各双下划线"}},[s._v("#")]),s._v(" "),n("code",[s._v("__xx__")]),s._v("前后各双下划线")]),s._v(" "),n("p",[s._v("当你看到"),n("code",[s._v("__this__")]),s._v("的时，就知道不要调用它。为什么？因为它的意思是它是用于Python调用的，如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('>>> name = "igor" \n>>> name.__len__()\n 4 \n>>> len(name)\n 4 \n>>> number = 10 \n>>> number.__add__(20) \n 30 \n>>> number + 20\n 30\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[n("code",[s._v("__xx__")]),s._v("经常是操作符或本地函数调用的magic methods。在上面的例子中，提供了一种重写类的操作符的功能。")]),s._v(" "),n("p",[s._v("在特殊的情况下，它只是python调用的hook。例如，"),n("code",[s._v("__init__()")]),s._v("函数是当对象被创建初始化时调用的;"),n("code",[s._v("__new__()")]),s._v("是用来创建实例。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class CrazyNumber(object):\n    def __init__(self, n): \n        self.n = n \n    def __add__(self, other): \n        return self.n - other \n    def __sub__(self, other): \n        return self.n + other \n    def __str__(self): \n        return str(self.n) \n\nnum = CrazyNumber(10) \nprint num # 10\nprint num + 5 # 5\nprint num - 20 # 30\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("另一个例子")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class Room(object):\n    def __init__(self): \n        self.people = [] \n    def add(self, person): \n        self.people.append(person) \n    def __len__(self): \n        return len(self.people)\n \nroom = Room() \nroom.add("Igor") \nprint len(room) # 1\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),n("p",[s._v("使用 "),n("code",[s._v("_one_underline")]),s._v(" 来表示该方法或属性是私有的，不对外暴漏；当创建一个用于python调用或一些特殊情况时，使用 "),n("code",[s._v("__two_underline__")]),s._v("；使用 "),n("code",[s._v("__just_to_underlines")]),s._v(" 可以避免子类重写，但这个属性比较复杂，不推荐～")])])}),[],!1,null,null,null);e.default=t.exports}}]);