(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{476:function(s,e,n){s.exports=n.p+"assets/img/sign_pe_sample.0b0b8dd3.png"},477:function(s,e,n){s.exports=n.p+"assets/img/microsoft_section_certificate.9f8c3ff7.png"},478:function(s,e,n){s.exports=n.p+"assets/img/cert_window_import.60be6f60.png"},590:function(s,e,n){"use strict";n.r(e);var t=n(15),a=Object(t.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"pe-签名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pe-签名"}},[s._v("#")]),s._v(" PE 签名")]),s._v(" "),t("p",[s._v("简单来说，数字签名(digital signature)是非对称公钥密码系统的逆应用：用私钥加密消息，用公钥解密消息。")]),s._v(" "),t("p",[s._v("而证书，实际上就是对公钥进行数字签名，它是对公钥合法性提供证明的技术。")]),s._v(" "),t("p",[s._v("一般来说，证书有两个作用：确保软件来自软件发布者、保护软件在发行后不被更改。本文就是围绕这两个核心问题进行展开说明。")]),s._v(" "),t("h2",{attrs:{id:"签名介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#签名介绍"}},[s._v("#")]),s._v(" 签名介绍")]),s._v(" "),t("p",[s._v("windows 平台下的 PE签名 大致可以分为"),t("code",[s._v("embedded、catalog")]),s._v("两种，区别如下：")]),s._v(" "),t("ul",[t("li",[s._v("embedded\n"),t("ul",[t("li",[s._v("嵌入式签名，顾名思义，将签名数据嵌入到 PE 文件中")]),s._v(" "),t("li",[s._v("右键属性即可查看相关信息")]),s._v(" "),t("li",[s._v("格式公开，可以自己解析")])])]),s._v(" "),t("li",[s._v("catalog\n"),t("ul",[t("li",[s._v("编录式签名，将签名数据放到一个后缀为"),t("code",[s._v(".cat")]),s._v("的编录文件中，并不嵌入到 PE 文件中。这种签名方法可以对任意格式的文件签名，并不局限于PE文件")]),s._v(" "),t("li",[s._v("右键查看文件属性看不到数字签名标签(因为签名数据是独立文件)")]),s._v(" "),t("li",[s._v("微软未公开格式文档")])])])]),s._v(" "),t("p",[s._v("另外，对于运行于内核中的文件，Microsoft 要求必须进行"),t("strong",[s._v("交叉证书")]),s._v("认证。(可以通过 "),t("code",[s._v("signtool verify /v /kp <mydriver.sys>")]),s._v(" 查看交叉证书链)。")]),s._v(" "),t("p",[s._v("【"),t("em",[s._v("在2021年7月1日之后，必须使用 WHQL 签名对内核模式驱动程序签名。不能使用链接到2021年7月1日之后过期的交叉证书的证书来对内核模式驱动程序进行签名。")]),s._v("】")]),s._v(" "),t("h3",{attrs:{id:"查看签名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看签名"}},[s._v("#")]),s._v(" 查看签名")]),s._v(" "),t("p",[s._v("嵌入式签名内容如下：\n"),t("img",{attrs:{src:n(476),alt:"signature_pe"}})]),s._v(" "),t("p",[s._v("签名中包含的主要信息有：")]),s._v(" "),t("ul",[t("li",[s._v("签名者(signer)\n"),t("ul",[t("li",[s._v("名字、邮箱、签名时间(一般以'副署'中时间戳为准)")])])]),s._v(" "),t("li",[s._v("签名时间\n"),t("ul",[t("li",[s._v("一般用"),t("em",[s._v("副署签名")]),s._v("中的时间戳")])])]),s._v(" "),t("li",[s._v("副署签名(counter signature)\n"),t("ul",[t("li",[s._v("optional，一个独立、完整的签名")]),s._v(" "),t("li",[s._v("一般用于签名时间戳，指明允许用当前时间签名数据")]),s._v(" "),t("li",[s._v("常见的两种数据格式:\n"),t("ul",[t("li",[t("code",[s._v("szOID_RFC3161_counterSign")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("To obtain the timestamp information (RFC3161) of that signature, search the Unauthenticated attribute with pszObjId = szOID_RFC3161_counterSign (1.3.6.1.4.1.311.3.3.1).")])]),s._v(" "),t("li",[t("em",[s._v("暂未找到此字段的完整格式描述，但能找到解出时间戳的相关代码")])])])]),s._v(" "),t("li",[t("code",[s._v("szOID_RSA_counterSign")])])])])])]),s._v(" "),t("li",[s._v("嵌套签名(nested signature)\n"),t("ul",[t("li",[s._v("optional，一个独立、完整的签名")]),s._v(" "),t("li",[s._v("如果文件属性中的签名列表有多个签名，从结构上讲，第二个(包含)签名开始就是嵌套签名")]),s._v(" "),t("li",[t("code",[s._v("Authenticode stores secondary signatures in the UnauthenticatedAttributes of primary signer (index 0), instead of additional PKCS 7 signer.")]),s._v(" "),t("ul",[t("li",[t("code",[s._v('From the primary signature, search the UnauthenticatedAttribue for below: define szOID_NESTED_SIGNATURE "1.3.6.1.4.1.311.2.4.1". The encoded object of this attribute is a full PKCS 7 signer.')])])])]),s._v(" "),t("li",[t("strong",[s._v("注意")]),t("em",[s._v("对照下文 SignedData 结构的 SignerInfos 字段的用途")])])])]),s._v(" "),t("li",[s._v("证书(certificate)：\n"),t("ul",[t("li",[s._v("证书链(certificate chain)\n"),t("ul",[t("li",[s._v("文件中内嵌的证书链，只到 ca 证书，不包含根证书")])])]),s._v(" "),t("li",[s._v("签名\n"),t("ul",[t("li",[s._v("不能在属性中查看")]),s._v(" "),t("li",[s._v("用 CA 私钥对证书主体(即下文 X509 证书的"),t("code",[s._v("TBSCertificate")]),s._v("结构)加密形成的签名")])])]),s._v(" "),t("li",[s._v("证书详情\n"),t("ul",[t("li",[s._v("版本(Version)")]),s._v(" "),t("li",[s._v("序列号(Serial Number)\n"),t("ul",[t("li",[s._v("由 CA 指定的独一无二的 ID")])])]),s._v(" "),t("li",[s._v("颁发者(Issuer)、使用者(Subject)")]),s._v(" "),t("li",[s._v("证书有效期(Not Before、Not After)")]),s._v(" "),t("li",[s._v("签名算法、公钥、公钥参数\n"),t("ul",[t("li",[s._v("Subject Public Key 相关的信息")])])]),s._v(" "),t("li",[s._v("签名哈希算法")]),s._v(" "),t("li",[s._v("CRL(证书吊销列表, Certificate revocation list) 分发点")]),s._v(" "),t("li",[s._v("指纹\n"),t("ul",[t("li",[s._v("windows 查看 PE 属性时能看到，对 证书完整内容 进行 SHA1 计算得到")])])]),s._v(" "),t("li",[s._v("秘钥用法(Key Usage)、增强型(enhanced)秘钥用法\n"),t("ul",[t("li",[s._v("指明证书的用途范围")])])]),s._v(" "),t("li",[s._v("证书策略")]),s._v(" "),t("li",[s._v("授权信息访问、授权秘钥标识符、使用者秘钥标识符")])])])])])]),s._v(" "),t("p",[s._v("可以通过命令 "),t("code",[s._v("openssl x509 -in abc.cer -text -noout")]),s._v(" 查看证书的详细信息(此工具不支持 DER 编码二进制 X.509, 只支持 Base64 编码的 X.509)。")]),s._v(" "),t("p",[s._v("可以在 Windows 系统的"),t("strong",[s._v("运行")]),s._v("中输入"),t("code",[s._v("certmgr.msc")]),s._v("可以看到系统默认的ECC签名的根证书。")]),s._v(" "),t("h3",{attrs:{id:"pe文件中签名结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pe文件中签名结构"}},[s._v("#")]),s._v(" PE文件中签名结构")]),s._v(" "),t("p",[s._v("嵌入式签名结构如下：\n"),t("img",{attrs:{src:n(477),alt:"microsoft_section_certificate"}})]),s._v(" "),t("h2",{attrs:{id:"签名验证"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#签名验证"}},[s._v("#")]),s._v(" 签名验证")]),s._v(" "),t("h3",{attrs:{id:"证书生成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#证书生成"}},[s._v("#")]),s._v(" 证书生成")]),s._v(" "),t("ol",[t("li",[s._v("服务器将公钥A给CA(公钥是服务器的)")]),s._v(" "),t("li",[s._v("CA用自己的私钥B给公钥A加密，生成数字签名A")]),s._v(" "),t("li",[s._v("CA把公钥A，数字签名A，附加一些服务器信息整合在一起，生成证书，发回给服务器")])]),s._v(" "),t("p",[t("em",[s._v("注：私钥B是用于加密公钥A的，私钥B和公钥A并不是配对的")])]),s._v(" "),t("h3",{attrs:{id:"证书验证"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#证书验证"}},[s._v("#")]),s._v(" 证书验证")]),s._v(" "),t("ol",[t("li",[s._v("客户端得到证书")]),s._v(" "),t("li",[s._v("客户端得到用于证书验证的公钥B(通过CA或系统内嵌或其它途径)")]),s._v(" "),t("li",[s._v("客户端用公钥B对证书中的数字签名解密，得到哈希值")]),s._v(" "),t("li",[s._v("客户端对证书中的公钥A进行哈希值计算")]),s._v(" "),t("li",[s._v("两个哈希值对比，如果相同，则证书合法")])]),s._v(" "),t("p",[t("em",[s._v("注：公钥B和上述的私钥B是配对的，分别用于对证书的验证(解密)和生成(加密)")])]),s._v(" "),t("h3",{attrs:{id:"验证证书的证书"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#验证证书的证书"}},[s._v("#")]),s._v(" 验证证书的证书")]),s._v(" "),t("p",[s._v("客户端得到的用于证书验证的"),t("strong",[s._v("公钥B")]),s._v("是合法的吗？为了解决这个问题，我们也需要想办法对公钥B也进行验证，这就需要找到对公钥B也进行签名、验证，就就是前面讲到的"),t("em",[s._v("生成证书、验证证书")]),s._v("。不过，这个过程何时是个尽头呢？根证书(Root Certificate)。")]),s._v(" "),t("p",[s._v("根证书是属于根证书颁发机构(CA)的公钥证书，是在公开金钥基础建设中，信任链的起点。安装根证书意味着对这个CA认证中心的信任。另外，根证书是自签名的证书。")]),s._v(" "),t("h3",{attrs:{id:"签名验证-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#签名验证-2"}},[s._v("#")]),s._v(" 签名验证")]),s._v(" "),t("ol",[t("li",[s._v("验证时间戳")]),s._v(" "),t("li",[s._v("验证签名 hash 一致性")]),s._v(" "),t("li",[s._v("验证证书是否被吊销")]),s._v(" "),t("li",[s._v("沿证书链，重复以上流程以验证证书的有效性，直到根证书")])]),s._v(" "),t("h2",{attrs:{id:"实践"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实践"}},[s._v("#")]),s._v(" 实践")]),s._v(" "),t("h3",{attrs:{id:"嵌入式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#嵌入式"}},[s._v("#")]),s._v(" 嵌入式")]),s._v(" "),t("ol",[t("li",[s._v("用 "),t("code",[s._v("makecert")]),s._v(" 生成一个自签名的根证书: "),t("code",[s._v('makecert -n "cn=root" -r -sv test_root.pvk test_root.cer')])]),s._v(" "),t("li",[s._v("用根证书签发一个子证书: "),t("code",[s._v('makecert -n "cn=child" -iv test_root.pvk -ic test_root.cer -sv test_child.pvk test_child.cer')])]),s._v(" "),t("li",[s._v("当然，此时这种证书是不被系统所信任的，需要手动把生成的证书导入到系统：\n"),t("ul",[t("li",[s._v("在 Windows 系统的"),t("strong",[s._v("运行")]),s._v("中输入"),t("code",[s._v("certmgr.msc")])]),s._v(" "),t("li",[s._v('找到 "受信任的根证书颁发机构"，右键 -> 所有任务 -> 导入\n'),t("img",{attrs:{src:n(478),alt:"cert_window_import"}})])])]),s._v(" "),t("li",[s._v("此时，就可以使用微软的 "),t("code",[s._v("signtool")]),s._v(" 工具对PE文件进行嵌入式签名了")])]),s._v(" "),t("h3",{attrs:{id:"编录式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编录式"}},[s._v("#")]),s._v(" 编录式")]),s._v(" "),t("ol",[t("li",[s._v("根据需要创建一个 cdf 文件，例如："),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("[CatalogHeader]\nName=tstamd64.cat\nPublicVersion=0x0000001\nEncodingType=0x00010001\nCATATTR1=0x10010001:OSAttr:2:6.0\n[CatalogFiles]\n<hash>File1=amd64\\toaster.pdb\n<hash>File2=amd64\\toaster.sys\n<hash>File3=amd64\\toastva.exe\n<hash>File4=amd64\\toastva.pdb\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])])]),s._v(" "),t("li",[s._v("使用微软的 "),t("code",[s._v("makecat")]),s._v(" 工具从上一步创建的 cdf 文件生成 cat 文件, 例如："),t("code",[s._v("makecat -v tstamd64.cdf")])]),s._v(" "),t("li",[s._v("使用微软的 "),t("code",[s._v("signtool")]),s._v(" 工具对 cat 文件进行签名")])]),s._v(" "),t("p",[t("em",[s._v("注：当然也要将证书加入信任列表")])]),s._v(" "),t("p",[t("em",[s._v("注：参考 "),t("a",{attrs:{href:"https://docs.microsoft.com/zh-cn/windows-hardware/drivers/install/using-makecat-to-create-a-catalog-file",target:"_blank",rel:"noopener noreferrer"}},[s._v("using-makecat-to-create-a-catalog-file"),t("OutboundLink")],1)])]),s._v(" "),t("h3",{attrs:{id:"验证签名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#验证签名"}},[s._v("#")]),s._v(" 验证签名")]),s._v(" "),t("p",[s._v("使用命令行进行验证： "),t("code",[s._v("signtool verify /v /kp [service-new.exe]")])]),s._v(" "),t("p",[t("em",[s._v("注：参考 "),t("RouterLink",{attrs:{to:"/blog/platform/windows/make_cert.html"}},[s._v("生成 win10 下调试服务时的证书")])],1)]),s._v(" "),t("h2",{attrs:{id:"签名代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#签名代码"}},[s._v("#")]),s._v(" 签名代码")]),s._v(" "),t("p",[s._v("常见的验证签名的代码片段：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('    BOOL CheckFileTrust( LPCWSTR lpFileName )\n    {\n        BOOL bRet = FALSE;\n        WINTRUST_DATA wd = { 0 };\n        WINTRUST_FILE_INFO wfi = { 0 };\n        WINTRUST_CATALOG_INFO wci = { 0 };\n        CATALOG_INFO ci = { 0 };\n    \n        HCATADMIN hCatAdmin = NULL;\n        if ( !CryptCATAdminAcquireContext( &amp;hCatAdmin, NULL, 0 ) )\n        {\n            return FALSE;\n        }\n    \n        HANDLE hFile = CreateFileW( lpFileName, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL );\n        if ( INVALID_HANDLE_VALUE == hFile )\n        {\n            CryptCATAdminReleaseContext( hCatAdmin, 0 );\n            return FALSE;\n        }\n    \n        DWORD dwCnt = 100;\n        BYTE byHash[100];\n        CryptCATAdminCalcHashFromFileHandle( hFile, &amp;dwCnt, byHash, 0 );\n        CloseHandle( hFile );\n    \n        LPWSTR pszMemberTag = new WCHAR[dwCnt * 2 + 1];\n        for ( DWORD dw = 0; dw &lt; dwCnt; ++dw )\n        {\n            wsprintfW( &amp;pszMemberTag[dw * 2], L"%02X", byHash[dw] );\n        }\n    \n        HCATINFO hCatInfo = CryptCATAdminEnumCatalogFromHash( hCatAdmin, byHash, dwCnt, 0, NULL );\n        if ( NULL == hCatInfo )   // 编录中没有则验证是否有嵌入式签名\n        {\n            wfi.cbStruct       = sizeof( WINTRUST_FILE_INFO );\n            wfi.pcwszFilePath  = lpFileName;\n            wfi.hFile          = NULL;\n            wfi.pgKnownSubject = NULL;\n    \n            wd.cbStruct            = sizeof( WINTRUST_DATA );\n            wd.dwUnionChoice       = WTD_CHOICE_FILE;\n            wd.pFile               = &amp;wfi;\n            wd.dwUIChoice          = WTD_UI_NONE;\n            wd.fdwRevocationChecks = WTD_REVOKE_NONE;\n            wd.dwStateAction       = WTD_STATEACTION_IGNORE;\n            wd.dwProvFlags         = WTD_SAFER_FLAG;\n            wd.hWVTStateData       = NULL;\n            wd.pwszURLReference    = NULL;\n        }\n        else  // 编录中有，验证编录文件的签名是否有效\n        {\n            CryptCATCatalogInfoFromContext( hCatInfo, &amp;ci, 0 );\n            wci.cbStruct             = sizeof( WINTRUST_CATALOG_INFO );\n            wci.pcwszCatalogFilePath = ci.wszCatalogFile;\n            wci.pcwszMemberFilePath  = lpFileName;\n            wci.pcwszMemberTag       = pszMemberTag;\n    \n            wd.cbStruct            = sizeof( WINTRUST_DATA );\n            wd.dwUnionChoice       = WTD_CHOICE_CATALOG;\n            wd.pCatalog            = &amp;wci;\n            wd.dwUIChoice          = WTD_UI_NONE;\n            wd.fdwRevocationChecks = WTD_STATEACTION_VERIFY;\n            wd.dwProvFlags         = 0;\n            wd.hWVTStateData       = NULL;\n            wd.pwszURLReference    = NULL;\n        }\n        GUID action = WINTRUST_ACTION_GENERIC_VERIFY_V2;\n        HRESULT hr  = WinVerifyTrust( NULL, &amp;action, &amp;wd );\n        bRet        = SUCCEEDED( hr );\n    \n        if ( NULL != hCatInfo )\n        {\n            CryptCATAdminReleaseCatalogContext( hCatAdmin, hCatInfo, 0 );\n        }\n        CryptCATAdminReleaseContext( hCatAdmin, 0 );\n        delete[] pszMemberTag;\n        return bRet;\n    }\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br"),t("span",{staticClass:"line-number"},[s._v("75")]),t("br"),t("span",{staticClass:"line-number"},[s._v("76")]),t("br"),t("span",{staticClass:"line-number"},[s._v("77")]),t("br"),t("span",{staticClass:"line-number"},[s._v("78")]),t("br"),t("span",{staticClass:"line-number"},[s._v("79")]),t("br")])]),t("p",[s._v("以上是通过 Windows 的 API 进行验证操作，如果让我们自己去进行完整的验证流程，我们该怎么弄呢？")]),s._v(" "),t("h3",{attrs:{id:"_1-取出签名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-取出签名"}},[s._v("#")]),s._v(" 1. 取出签名")]),s._v(" "),t("p",[s._v("根据上文中 PE 结构可知，PE头的"),t("code",[s._v("Data Directories中Certificate Table")]),s._v("里面指明了"),t("code",[s._v("WIN_CERTIFICATE")]),s._v("的存放位置和大小，"),t("code",[s._v("WIN_CERTIFICATE")]),s._v("的"),t("code",[s._v("bCertificate")]),s._v("就是是SignedData格式的签名。结构如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    typedef struct _IMAGE_DATA_DIRECTORY {\n        DWORD   VirtualAddress;  // PE文件的偏移\n        DWORD   Size;\n    } IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;\n    \n    typedef struct _WIN_CERTIFICATE\n    {\n        DWORD       dwLength; // WIN_CERTIFICATE 的长度（含bCertificate的大小）\n        WORD        wRevision;\n        WORD        wCertificateType;\n        BYTE        bCertificate[ANYSIZE_ARRAY]; // signedData开始的位置\n    \n    } WIN_CERTIFICATE, *LPWIN_CERTIFICATE;\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("h3",{attrs:{id:"_2-校验文件自身的签名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-校验文件自身的签名"}},[s._v("#")]),s._v(" 2. 校验文件自身的签名")]),s._v(" "),t("p",[s._v("文件签名本身是遵循"),t("strong",[s._v("PKCS7")]),s._v("标准中的 SignedData 格式，用 ASN1 表述的格式如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    SignedData ::= SEQUENCE {\n        version Version,\n        digestAlgorithms DigestAlgorithmIdentifiers,\n        contentInfo ContentInfo,  -- 这个里面包含了PE文件的Hash\n        certificates  --证书的数组（不包括根证书）\n            [0] IMPLICIT ExtendedCertificatesAndCertificates OPTIONAL,\n        Crls \n            [1] IMPLICIT CertificateRevocationLists OPTIONAL,\n        signerInfos SignerInfos }  -- 签名者的信息\n    \n    SignerInfos ::= SET OF SignerInfo\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[t("strong",[s._v("PKCS7")]),s._v("是加密消息的语法标准，"),t("strong",[s._v("X.509")]),s._v("是证书的格式。"),t("strong",[s._v("ASN1")]),s._v("是一种描述对象结构的语法，在一行的定义中可以简单的认为前面的是变量名后面的是类型。")]),s._v(" "),t("p",[t("strong",[s._v("ASN1")]),s._v("并未定义编码方法，DER是一种常见的编码方法，其他还有 Base64 等编码方法。")]),s._v(" "),t("p",[s._v("SignerInfos的结构如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    SignerInfo ::= SEQUENCE {\n        version Version,\n        issuerAndSerialNumber IssuerAndSerialNumber,\n        digestAlgorithm DigestAlgorithmIdentifier,\n        authenticatedAttributes -- 内含SignedData中contentInfo的摘要\n            [0] IMPLICIT Attributes OPTIONAL,\n        digestEncryptionAlgorithm DigestEncryptionAlgorithmIdentifier,\n        encryptedDigest EncryptedDigest, -- 加密后的摘要\n        unauthenticatedAttributes \n            [1] IMPLICIT Attributes OPTIONAL }\n    IssuerAndSerialNumber ::= SEQUENCE {\n        issuer Name,\n        serialNumber CertificateSerialNumber }\n    EncryptedDigest ::= OCTET STRING\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("authenticatedAttributes 包含了 contentType和messageDigest，messageDigest 内就是对 SignedData 的 ContentInfo 做的摘要。对authenticatedAttributes 做摘要得到一个 DigestInfo 结构的数据，DigestInfo 的结构如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    DigestInfo ::= SEQUENCE {\n        digestAlgorithm DigestAlgorithmIdentifier,\n        digest Digest }\n    \n    Digest ::= OCTET STRING\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("用 IssuerAndSerialNumber 找到签名者的证书，使用里面的公钥解密EncryptedDigest 得到一个 DigestInfo 结构（一般是RSA算法），将这个结构与authenticatedAttributes 做摘要得到的结构对比，一致的话才进行下一步。")]),s._v(" "),t("h3",{attrs:{id:"_3-验证证书链"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-验证证书链"}},[s._v("#")]),s._v(" 3. 验证证书链")]),s._v(" "),t("p",[s._v("相关结构如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("-- X509的证书格式\n   Certificate  ::=  SEQUENCE  {\n        tbsCertificate       TBSCertificate,   -- 证书主体\n        signatureAlgorithm   AlgorithmIdentifier,  -- 签名用的算法，一般为sha1RSA\n        signatureValue       BIT STRING  }     -- 证书的签名\n \n   TBSCertificate  ::=  SEQUENCE  {\n        version         [0]  EXPLICIT Version DEFAULT v1, -- PE文件数字签名用的版本为3\n        serialNumber         CertificateSerialNumber,\n        signature            AlgorithmIdentifier,\n        issuer               Name,\n        validity             Validity, -- 有效期\n        subject              Name,\n        subjectPublicKeyInfo SubjectPublicKeyInfo,  -- 含有这个证书的公钥\n        issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,\n                             -- If present, version MUST be v2 or v3        \n        subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,\n                             -- If present, version MUST be v2 or v3\n        extensions      [3]  EXPLICIT Extensions OPTIONAL  -- 扩展\n                             -- If present, version MUST be v3\n        }\n \n   -- 含有公钥的信息\n   SubjectPublicKeyInfo  ::=  SEQUENCE  {\n        algorithm            AlgorithmIdentifier,\n        subjectPublicKey     BIT STRING  }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br")])]),t("p",[s._v("首先构建证书链，从终端签发数字签名的证书一直到自签名的根证书。这时要了解到证书最后一个成员为扩展，扩展是一列其他的数据，其中两项比较重要的是AuthorityKeyIdentifier和SubjectKeyIdentifier，结构分别如下")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("AuthorityKeyIdentifier ::= SEQUENCE {\n      keyIdentifier             [0] KeyIdentifier           OPTIONAL,\n      authorityCertIssuer       [1] GeneralNames            OPTIONAL,\n      authorityCertSerialNumber [2] CertificateSerialNumber OPTIONAL  }\n \n   KeyIdentifier ::= OCTET STRING\n \n   SubjectKeyIdentifier ::= KeyIdentifier\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("组建证书链时，将把A证书的中的 AuthorityKeyIdentifier（简称AKID） 的keyIdentifier、authorityCertIssuer、authorityCertSerialNumber 与B证书的 SubjectKeyIdentifier（简称SKID）、issuer 、serialNumber 分别匹配，如果匹配上则B证书为A证书的签发者。如果A证书的上面三项与自己对应数据匹配上，则A证书为自签名的证书，证书链构建完毕。")]),s._v(" "),t("p",[s._v("然后，校验证书链中每个证书的签名、有效期和用法（是否可以用于代码签名）。签名验证的算法为证书中的 signatureAlgorithm，签名是 signatureValue，被签名的数据为 tbsCertificate，公钥从父证书的 subjectPublicKeyInfo 里面拿。")]),s._v(" "),t("h3",{attrs:{id:"_4-比对pe文件和签名数据中的hash"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-比对pe文件和签名数据中的hash"}},[s._v("#")]),s._v(" 4. 比对PE文件和签名数据中的Hash")]),s._v(" "),t("p",[s._v("签名数据中的Hash算法和Hash在SignedData的contentInfo中，contentinfo的结构为：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    ContentInfo ::= SEQUENCE {\n    contentType ContentType,\n    content\n        [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL \n    }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("contentType 是SPC_INDIRECT_DATA_OBJID (1.3.6.1.4.1.311.2.1.4)，表明了content的类型。content是是一个SpcIndirectDataContent结构的数据。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    SpcIndirectDataContent ::= SEQUENCE {\n        data                    SpcAttributeTypeAndOptionalValue,\n        messageDigest           DigestInfo\n    } --#public—\n    \n    DigestInfo ::= SEQUENCE {\n        digestAlgorithm     AlgorithmIdentifier,\n        digest              OCTETSTRING\n    }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("digestAlgorithm 就是Hash算法，一般为sha1。digest就是文件的Hash。")]),s._v(" "),t("p",[s._v("Hash的计算原则为排除且仅排除掉签名过程中可能会改动的数据以及数字签名本身。大概计算过程如下：")]),s._v(" "),t("ul",[t("li",[s._v("除去PE头中 checksum 和 Certificate Table 计算PE头的HASH（含 Section Table）")]),s._v(" "),t("li",[s._v("按每个节偏移的顺序依次对每个节的数据算HASH")]),s._v(" "),t("li",[s._v("对PE附加数据算HASH\n"),t("ul",[t("li",[s._v("附加数据的起始偏移为："),t("code",[s._v("PE头大小+每个节的大小")])]),s._v(" "),t("li",[t("code",[s._v("附加数据大小=文件大小-(PE头+每个节)-签名的大小")])]),s._v(" "),t("li",[t("code",[s._v("签名的大小是 Optional Header Data Directories[Certificate Table].Size")])])])])]),s._v(" "),t("p",[s._v("另外，由这个Hash算法可以看出，PE文件的签名数据都是放到PE文件最尾部的，因为只有附加数据最末尾一段为签名数据大小的数据是没有计算在PE的Hash内的。这就给文件带来了在文件尾部进行修改的可能，不是吗？")]),s._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("通过上文，我们对 Windows 下的签名有了一定的了解，而这只是 Microsoft 复杂的签名系统中的一小部分，不过有了这些认知，就更容易去学习签名相关的其他细节以及更加复杂的内容了。")]),s._v(" "),t("h2",{attrs:{id:"思考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#思考"}},[s._v("#")]),s._v(" 思考")]),s._v(" "),t("ul",[t("li",[s._v("counter signature 是对哪块内容计算签名内容呢？\n"),t("ul",[t("li",[s._v("这个 signature 是父签名的一个属性，表达这个属性的结构体("),t("a",{attrs:{href:"https://chromium.googlesource.com/external/omaha/+/8328814108609a7061697caea3f48bca98c2938f/common/signaturevalidator.cc",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考链接"),t("OutboundLink")],1),s._v(")为："),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("typedef struct _CRYPT_ATTRIBUTE {\n    LPSTR            pszObjId;\n    DWORD            cValue;\n    PCRYPT_ATTR_BLOB rgValue;\n} CRYPT_ATTRIBUTE, *PCRYPT_ATTRIBUTE;\n\ntypedef struct _CRYPTOAPI_BLOB {\nDWORD cbData;\nBYTE  *pbData;\n} CRYPT_INTEGER_BLOB, *PCRYPT_ATTR_BLOB;\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])])])])])]),s._v(" "),t("h2",{attrs:{id:"reference"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[s._v("#")]),s._v(" Reference")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://blog.mtian.org/2015/06/windowspesign/#_Toc419139202",target:"_blank",rel:"noopener noreferrer"}},[s._v("对Windows 平台下PE文件数字签名的一些研究"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://docs.microsoft.com/zh-cn/windows-hardware/drivers/install/using-inf2cat-to-create-a-catalog-file",target:"_blank",rel:"noopener noreferrer"}},[s._v("using-inf2cat-to-create-a-catalog-file"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/dspeeding/p/3338129.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("CSP学习之CryptoAPI初识"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://docs.microsoft.com/zh-cn/windows-hardware/drivers/install/cross-certificates-for-kernel-mode-code-signing",target:"_blank",rel:"noopener noreferrer"}},[s._v("用于内核模式代码签名的交叉证书"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://social.msdn.microsoft.com/Forums/lync/en-US/40dcf50b-c637-4d7d-b0c0-598a61f96f8c/rfc3161-timestamp-information-in-digital-signature-authenticode?forum=windowsgeneraldevelopmentissues",target:"_blank",rel:"noopener noreferrer"}},[s._v("RFC3161 timestamp information in digital signature (authenticode)"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=a.exports}}]);