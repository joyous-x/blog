(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{574:function(n,e,t){"use strict";t.r(e);var r=t(15),s=Object(r.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"grpc-interceptor-with-go"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#grpc-interceptor-with-go"}},[n._v("#")]),n._v(" grpc interceptor with go")]),n._v(" "),t("h2",{attrs:{id:"interceptor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#interceptor"}},[n._v("#")]),n._v(" Interceptor")]),n._v(" "),t("p",[n._v("通过 ServerOption 给 grpc.Server 增加 interceptor 时有限制："),t("strong",[n._v("Only one unary interceptor can be installed.")]),n._v("。为了安装多个拦截器，我们需要一种可以将多个 interceptor 重新组合的方式。")]),n._v(" "),t("p",[n._v("目前常用的方式是：\n"),t("code",[n._v("package : github.com/grpc-ecosystem/go-grpc-middleware: func ChainUnaryClient(interceptors ...grpc.UnaryClientInterceptor) grpc.UnaryClientInterceptor func ChainUnaryServer(interceptors ...grpc.UnaryServerInterceptor) grpc.UnaryServerInterceptor")]),n._v("\n使用示例见："),t("a",{attrs:{href:"https://github.com/joyoushunter/Saturn/blob/master/src/enceladus/wgrpc/server.go",target:"_blank",rel:"noopener noreferrer"}},[n._v("enceladus.wgrpc.server"),t("OutboundLink")],1)]),n._v(" "),t("p",[n._v("下边我们来看看它的实现：\n```\n// Execution is done in left-to-right order, including passing of context.\nfunc ChainUnaryServer(interceptors ...grpc.UnaryServerInterceptor) grpc.UnaryServerInterceptor {\nn := len(interceptors)")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("        if n > 1 {\n            lastI := n - 1\n            return func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n                var (\n                    chainHandler grpc.UnaryHandler\n                    curI         int\n                )\n\n                chainHandler = func(currentCtx context.Context, currentReq interface{}) (interface{}, error) {\n                    if curI == lastI {\n                        return handler(currentCtx, currentReq)\n                    }\n                    curI++\n                    resp, err := interceptors[curI](currentCtx, currentReq, info, chainHandler)\n                    curI--\n                    return resp, err\n                }\n\n                return interceptors[0](ctx, req, info, chainHandler)\n            }\n        }\n\n        if n == 1 {\n            return interceptors[0]\n        }\n\n        // n == 0; Dummy interceptor maintained for backward compatibility to avoid returning nil.\n        return func(ctx context.Context, req interface{}, _ *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n            return handler(ctx, req)\n        }\n    }\n```\n")])])]),t("p",[n._v("其实，它的实现的本质就是：利用闭包来引用栈中数据达到延迟使用的效果")]),n._v(" "),t("p",[n._v("通过这种方式，我们就可以尽情的实现自己的各种 interceptor：UnaryServerInterceptorAccessLog、grpc_recovery.UnaryServerInterceptor(package: github.com/grpc-ecosystem/go-grpc-middleware/recovery) 等等。")]),n._v(" "),t("h2",{attrs:{id:"grpc-stats"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#grpc-stats"}},[n._v("#")]),n._v(" grpc.stats")]),n._v(" "),t("p",[n._v("grpc.Server 可以通过安装 "),t("code",[n._v("func WithStatsHandler(h stats.Handler) DialOption")]),n._v(" 生成的 ServerOption 实现 "),t("em",[n._v("This package is for monitoring purpose only. All fields are read-only.")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    type Handler interface {\n        // TagRPC can attach some information to the given context.\n        // The context used for the rest lifetime of the RPC will be derived from\n        // the returned context.\n        TagRPC(context.Context, *RPCTagInfo) context.Context\n        // HandleRPC processes the RPC stats.\n        HandleRPC(context.Context, RPCStats)\n\n        // TagConn can attach some information to the given context.\n        // The returned context will be used for stats handling.\n        // For conn stats handling, the context used in HandleConn for this\n        // connection will be derived from the context returned.\n        // For RPC stats handling,\n        //  - On server side, the context used in HandleRPC for all RPCs on this\n        // connection will be derived from the context returned.\n        //  - On client side, the context is not derived from the context returned.\n        TagConn(context.Context, *ConnTagInfo) context.Context\n        // HandleConn processes the Conn stats.\n        HandleConn(context.Context, ConnStats)\n    }\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br")])]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    type Handler interface {\n        // TagRPC can attach some information to the given context.\n        // The context used for the rest lifetime of the RPC will be derived from\n        // the returned context.\n        TagRPC(context.Context, *RPCTagInfo) context.Context\n        // HandleRPC processes the RPC stats.\n        HandleRPC(context.Context, RPCStats)\n\n        // TagConn can attach some information to the given context.\n        // The returned context will be used for stats handling.\n        // For conn stats handling, the context used in HandleConn for this\n        // connection will be derived from the context returned.\n        // For RPC stats handling,\n        //  - On server side, the context used in HandleRPC for all RPCs on this\n        // connection will be derived from the context returned.\n        //  - On client side, the context is not derived from the context returned.\n        TagConn(context.Context, *ConnTagInfo) context.Context\n        // HandleConn processes the Conn stats.\n        HandleConn(context.Context, ConnStats)\n    }\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br")])]),t("p",[n._v("首先，我们看看 stats.Handler 的定义:")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    type Handler interface {\n        // TagRPC can attach some information to the given context.\n        // The context used for the rest lifetime of the RPC will be derived from\n        // the returned context.\n        TagRPC(context.Context, *RPCTagInfo) context.Context\n        // HandleRPC processes the RPC stats.\n        HandleRPC(context.Context, RPCStats)\n\n        // TagConn can attach some information to the given context.\n        // The returned context will be used for stats handling.\n        // For conn stats handling, the context used in HandleConn for this\n        // connection will be derived from the context returned.\n        // For RPC stats handling,\n        //  - On server side, the context used in HandleRPC for all RPCs on this\n        // connection will be derived from the context returned.\n        //  - On client side, the context is not derived from the context returned.\n        TagConn(context.Context, *ConnTagInfo) context.Context\n        // HandleConn processes the Conn stats.\n        HandleConn(context.Context, ConnStats)\n    }\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br")])]),t("p",[n._v("在 grpc 的方法调用过程中，RPCStats 在 stat.Begin、stat.ConnBegin、stat.ConnEnd、stat.End 几个状态之间转换。")]),n._v(" "),t("p",[n._v("其中 Handler.HandleConn 发生在 grpc 的方法调用之前，而 grpc方法调用后，会调用 Handler.HandleRPC (此时 RPCStats 为 stat.End)。由此，我们可以通过这种方式，达到对 grpc 方法 装饰的效果。如：github.com/openzipkin/zipkin-go 的实现，使用示例：")]),n._v(" "),t("h2",{attrs:{id:"appendix-a"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#appendix-a"}},[n._v("#")]),n._v(" Appendix A")]),n._v(" "),t("ol",[t("li",[t("RouterLink",{attrs:{to:"/blog/network/grpc/grpc_source_notes.html"}},[n._v("gRPC server 的 go 实现片段")])],1)])])}),[],!1,null,null,null);e.default=s.exports}}]);