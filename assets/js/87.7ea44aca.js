(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{625:function(_,v,a){"use strict";a.r(v);var t=a(15),r=Object(t.a)({},(function(){var _=this,v=_.$createElement,a=_._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[a("h1",{attrs:{id:"代码重构-refactor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码重构-refactor"}},[_._v("#")]),_._v(" 代码重构(Refactor)")]),_._v(" "),a("h2",{attrs:{id:"代码重构思考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码重构思考"}},[_._v("#")]),_._v(" 代码重构思考")]),_._v(" "),a("h3",{attrs:{id:"烂代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#烂代码"}},[_._v("#")]),_._v(" 烂代码")]),_._v(" "),a("p",[_._v("生成烂代码的原因，一般人都会认为有以下几种甚至更过：")]),_._v(" "),a("ol",[a("li",[_._v("需求变更")]),_._v(" "),a("li",[_._v("旧的逻辑难以维护")]),_._v(" "),a("li",[_._v("交付压力")]),_._v(" "),a("li",[_._v("自己的代码设计(这个是关键)")])]),_._v(" "),a("p",[_._v("烂代码产生的一个重要原因是："),a("strong",[_._v("破窗效应 ---\x3e 惯性 ---\x3e 好的更好，坏的更坏")])]),_._v(" "),a("h3",{attrs:{id:"clean-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#clean-code"}},[_._v("#")]),_._v(" Clean Code")]),_._v(" "),a("ul",[a("li",[_._v("持续集成\n"),a("ul",[a("li",[_._v("保证日常流程中所有开发人员的code clean")])])]),_._v(" "),a("li",[_._v("Unit Test\n"),a("ul",[a("li",[_._v("死循环："),a("em",[_._v("无单元测试 ---\x3e 不敢动以前代码 ---\x3e 烂代码")])])])])]),_._v(" "),a("h3",{attrs:{id:"重构的重要原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重构的重要原则"}},[_._v("#")]),_._v(" 重构的重要原则")]),_._v(" "),a("ul",[a("li",[_._v("do no harm\n"),a("ul",[a("li",[_._v("重构过程，首先要做到不伤害")]),_._v(" "),a("li",[_._v("隔离原有代码，尽量不动原有逻辑，保证原有功能的同时再增加新功能")])])]),_._v(" "),a("li",[_._v("baby step\n"),a("ul",[a("li",[_._v("一系列小步骤的改进，并逐步验证(测试)")]),_._v(" "),a("li",[_._v("重构是在不改变原有代码行为的前提下，对其进行的一系列小的改进，逐步完成预期目标")])])]),_._v(" "),a("li",[_._v("解耦\n"),a("ul",[a("li",[_._v("重构时一个重要的动作就是要解耦(函数内、函数间等)，否则很难重构\n"),a("ul",[a("li",[_._v("把数据处理封装，避免需要修改时，到处找数据的使用点进行修改，而造成 漏掉 或者 修改点过多造成工作量过大的问题")])])]),_._v(" "),a("li",[_._v("优先重构痛点：经常改动的复杂代码")]),_._v(" "),a("li",[_._v("public函数是流程函数，只应由各种独立功能的函数组成")])])]),_._v(" "),a("li",[_._v("新旧隔离\n"),a("ul",[a("li",[_._v("如果没做到新旧代码隔离，会逐步变成各种补丁交叉，造成可读性、可维护性急剧下降")]),_._v(" "),a("li",[_._v("代码隔离的方法，如：\n"),a("ul",[a("li",[_._v("新生方法 sprout method")]),_._v(" "),a("li",[_._v("新生类 sprout class：如，接口、观察者、直接加功能类")]),_._v(" "),a("li",[_._v("外覆方法 wrapper method")])])])])])]),_._v(" "),a("p",[_._v("总之：")]),_._v(" "),a("ul",[a("li",[_._v("重构不等于重写：重构是小步迭代、逐步验证；重写是，完全推翻重来")]),_._v(" "),a("li",[_._v("对于眼中的烂项目，如果用同样的思路去重构，只不过是一个新的烂项目的开始")])]),_._v(" "),a("h2",{attrs:{id:"架构之重构的12条军规"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#架构之重构的12条军规"}},[_._v("#")]),_._v(" 架构之重构的12条军规")]),_._v(" "),a("h3",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[_._v("#")]),_._v(" 前言")]),_._v(" "),a("p",[_._v("对于开发者来说，架构设计是软件研发过程中最重要的一环，所谓没有图纸，就建不了房子。在遍地App的互联网时代，架构设计有了一些比较成熟的模式，开发者和架构师也可以经常借鉴。")]),_._v(" "),a("p",[_._v("但是，随着应用的不断发展，最初的架构往往面临着各种问题，比如无法满足客户的需求、无法实现应用的扩展、无法实现新的特性等等。在这种情况下，我们如何避免一些坑，尽量比较成功地实现架构的重构，是很多开发者和架构师亟需解决的问题。")]),_._v(" "),a("p",[_._v("在这里，跟大家分享一下Uber的工程主管Raffi Krikorian的12条规则，并附上一些解读，希望对大家有所启发。")]),_._v(" "),a("h3",{attrs:{id:"_1、确定重构的目的和必要性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、确定重构的目的和必要性"}},[_._v("#")]),_._v(" 1、确定重构的目的和必要性")]),_._v(" "),a("p",[_._v("看起来这个规矩有些多余，但是请不要忽略。每一次架构的重构都是“伤筋动骨”，就像做手术一样，即使再成功，也会伤元气，所以决策者们首先要分析架构重构的理由和其他备选方案，明确重构的目的是为了满足业务需求，并且是不得不做的最佳方案，然后再考虑其他问题。")]),_._v(" "),a("p",[_._v("检查清单：")]),_._v(" "),a("ul",[a("li",[_._v("架构重构的原因是什么，是为了满足业务的需要还是只是觉得架构不好看？")]),_._v(" "),a("li",[_._v("除了架构重构之外，还有其他备选方案吗？是否都分析过这些方案的利弊？")])]),_._v(" "),a("h3",{attrs:{id:"_2、定义-重构完成-的界限"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、定义-重构完成-的界限"}},[_._v("#")]),_._v(" 2、定义“重构完成”的界限")]),_._v(" "),a("p",[_._v("如果确定要重构，那么要把目标明确下来，也就是重构的边界条件，怎么才算是“完成”了重构，目标要有数据量化，或者有能够测试的办法。这也是一个需求分析的过程，如果需求不明确，那么规格说明书没法写清楚，负责重构的团队也没有明确的目标，不能以重构的时间或者主观的判断为结束的依据。")]),_._v(" "),a("p",[_._v("检查清单：")]),_._v(" "),a("ul",[a("li",[_._v("重构的目标可以量化，或者说可以测试吗？")]),_._v(" "),a("li",[_._v("重构完成的标准是什么？得到业务部门或者领导的认可了吗？")])]),_._v(" "),a("h3",{attrs:{id:"_3、渐进式重构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、渐进式重构"}},[_._v("#")]),_._v(" 3、渐进式重构")]),_._v(" "),a("p",[_._v("现在软件研发最流行的就是快速迭代、持续交付、尽早反馈。这同样可以用在架构的重构上，重构过程的难度不亚于构建一个新产品，所以在设计重构的时候，要引入持续交付的流程，每一个重构步骤或者模块都要快速部署并得到反馈，以便评估重构的效果，及时作出策略调整。")]),_._v(" "),a("p",[_._v("有的人会说，我们的架构重构是釜底抽薪型的，没法渐进，只能一蹴而就。如果是这种情况，可以考虑在另外一套拷贝的系统中做重构，经过谨慎测试之后，将数据和业务迁移过去。")]),_._v(" "),a("p",[_._v("检查清单：")]),_._v(" "),a("ul",[a("li",[_._v("能否把重构过程分成小的迭代，每一次改进都能尽快得到反馈？")]),_._v(" "),a("li",[_._v("重构过程中的效果能够定期展示给业务部门或者领导吗？")])]),_._v(" "),a("h3",{attrs:{id:"_4、确定当前的架构状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、确定当前的架构状态"}},[_._v("#")]),_._v(" 4、确定当前的架构状态")]),_._v(" "),a("p",[_._v("在启动重构之前，团队要对当前的架构状态有清晰的了解，也就是设定好基准，以便评估重构的效果。")]),_._v(" "),a("p",[_._v("有些负责重构的架构师或者开发者，往往还没有搞清楚现有的架构设计，就开始重构了，结果经常出现这样的情况：重构到某个阶段，发现行不通，然后一拍脑袋说，哦，原来这块的架构是这个样的，是为了达到某某业务需求啊，这块不能动，得想别的办法。")]),_._v(" "),a("p",[_._v("类似的例子在研发团队中时有发生，也提醒我们要慎重小心。记得有位哲人说过，了解别人很容易，了解自己很难。")]),_._v(" "),a("p",[_._v("检查清单：")]),_._v(" "),a("ul",[a("li",[_._v("你了解当前的架构设计吗？它的设计初衷和之前的选型方案知道吗？")]),_._v(" "),a("li",[_._v("你能给架构设定一个基准状态吗？")])]),_._v(" "),a("h3",{attrs:{id:"_5、不要忽略数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、不要忽略数据"}},[_._v("#")]),_._v(" 5、不要忽略数据")]),_._v(" "),a("p",[_._v("数据的重要性不言而喻，业务都是以数据流为载体的，所以架构重构的本质就是对于数据流的重构。")]),_._v(" "),a("p",[_._v("数据对重构的重要性主要体现在两个方面：")]),_._v(" "),a("ol",[a("li",[_._v("在重构设计时，需要考虑业务数据的需求，重构之后的系统对于数据的存储、处理、分析等功能是否有影响；")]),_._v(" "),a("li",[_._v("在重构过程中，考虑依靠数据甚至是实际的数据来验证重构的效果，提供评估的支持。")])]),_._v(" "),a("p",[_._v("检查清单：")]),_._v(" "),a("ul",[a("li",[_._v("业务数据的需求在重构设计中有体现吗？")]),_._v(" "),a("li",[_._v("重构过程中能否通过实际数据来验证效果？")])]),_._v(" "),a("h3",{attrs:{id:"_6、管理好技术债务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、管理好技术债务"}},[_._v("#")]),_._v(" 6、管理好技术债务")]),_._v(" "),a("p",[_._v("技术债务就像信用卡一样，会有很高的利息率，就如同给团队留下了大量的帐务开销。")]),_._v(" "),a("p",[_._v("组织应该培养一种保证设计质量的文化。应当鼓励重构、同时也应当鼓励持续设计以及其它有关代码质量的实践。在开发时间中应当专门抽出一部分以解决技术债务。如果没有合适的照料，那么真实世界中的代码会变得越来越复杂难懂。")]),_._v(" "),a("p",[_._v("检查清单：")]),_._v(" "),a("ul",[a("li",[_._v("团队对技术债务有跟踪和备忘录机制吗？还是开发人员可以随意的产生债务？")]),_._v(" "),a("li",[_._v("针对技术债务有定期的培训、回顾机制吗？")])]),_._v(" "),a("h3",{attrs:{id:"_7、远离那些虚荣的东西"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7、远离那些虚荣的东西"}},[_._v("#")]),_._v(" 7、远离那些虚荣的东西")]),_._v(" "),a("p",[_._v("架构的重构过程应该是以目标为导向，换句话说“注重实效”。")]),_._v(" "),a("p",[_._v("对于技术人来说，一个经常被轻视的问题在于，喜欢追逐新鲜的热门技术，这其实是个好事情，说明技术人勇于创新，不断接受新技术。但是对于架构的重构这样的关键性任务来说，是不是新技术并不重要，重要的是能不能实现重构的目标。")]),_._v(" "),a("p",[_._v("对于新技术来说，虽然热度大，但是人才储备还不足，大家踩过的坑还不多，积累的失败教训和成功经验还不够，在这种情况下，建议大家不要头脑一热就上马新技术，应该客观冷静地评估新技术和成熟技术对架构重构的影响和效果，以数据和经验来说话，而不要追赶时髦。")]),_._v(" "),a("p",[_._v("检查清单：")]),_._v(" "),a("ul",[a("li",[_._v("重构的技术选型是否有详实的数据和专家评估？")]),_._v(" "),a("li",[_._v("选用的技术是否有良好的人才积累和足够的经验支持？你是不是实验小白鼠？")]),_._v(" "),a("li",[_._v("在技术选型时，是否至少有两个方案待评估？有没有成熟的技术方案？")])]),_._v(" "),a("h3",{attrs:{id:"_8、做好准备面对压力"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8、做好准备面对压力"}},[_._v("#")]),_._v(" 8、做好准备面对压力")]),_._v(" "),a("p",[_._v("这条军规更像是对架构师们的心理建议，软件开发过程中，压力无处不在。")]),_._v(" "),a("p",[_._v("对于架构重构来说，压力来源于多个方面：管理层、团队成员、同级部门等等。说白了，架构重构对个人来说往往是一件出力不讨好的事情。和做一个新产品能够取得很高的赞赏相比，重构的成绩往往并不受领导重视，而且出了问题还要承担很大的责任。从软件开发角度看，做新产品是从0到1，而架构重构是从-1到1，复杂性和难度通常更大。")]),_._v(" "),a("p",[_._v("因此，重构的负责人要提前做好心理准备，舒缓压力的一个技巧是，设置好里程碑，将重构的成果量化，并且和业务的变化关联起来，定期向利益相关各方同步状态，得到大家的理解和支持。")]),_._v(" "),a("p",[_._v("检查清单：")]),_._v(" "),a("ul",[a("li",[_._v("架构的重构是否得到了管理层（特别是最高管理层）的支持？他们是否对重构的时间、任务量有直接的认识？")]),_._v(" "),a("li",[_._v("你的重构计划中是否包含了一些可以量化的成果？是否定期向管理层展示这些成果？")])]),_._v(" "),a("h3",{attrs:{id:"_9、了解业务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9、了解业务"}},[_._v("#")]),_._v(" 9、了解业务")]),_._v(" "),a("p",[_._v("虽然看起来像是一句废话，但是我想Raffi Krikorian特意把这条提出来一定是有理由的。")]),_._v(" "),a("p",[_._v("架构重构的最终目的是改进业务，所以对于业务的了解将有助于架构师和技术人确定重构目标的优先级和关键路径。比如，我们需要知道哪些关键业务的架构是不能碰的，哪些业务之间是互相关联的，哪些业务的架构是需要优先重构的...等等。")]),_._v(" "),a("p",[_._v("除了了解业务本身，我们还需要了解“人”，表面上管理层是重构目标的裁决者，但实际上业务部门的人才是。技术人需要了解他们的业务需求，并将其转化为重构目标。通过这种方式，架构重构的意义才能得到具体的体现。")]),_._v(" "),a("p",[_._v("检查清单：")]),_._v(" "),a("ul",[a("li",[_._v("是否与业务部门就架构重构所能实现的业务目标进行过充分的讨论和确认？")]),_._v(" "),a("li",[_._v("是否对关键业务和优先重构的业务进行了确认？")])]),_._v(" "),a("h3",{attrs:{id:"_10、做好面对非技术因素的准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10、做好面对非技术因素的准备"}},[_._v("#")]),_._v(" 10、做好面对非技术因素的准备")]),_._v(" "),a("p",[_._v("恩......这又是一个不那么让人舒服的建议。")]),_._v(" "),a("p",[_._v("不管你是否愿意相信，技术在架构重构（以及其他很关键的公司决策中）的影响因素中并不是最高的，我们还会涉及到商业利益、管理层偏好、大客户影响、办公室zhengzhi等等，对于架构师和技术人来说，这些因素往往不是他们所能掌控的。我们能做的就是，根据不同的影响因素，调整目标。")]),_._v(" "),a("p",[_._v("请记住，不要死扛这个目标，当有人提出不同的意见时，要坦诚地和他们交流，并告知他们如何采纳意见，那么重构目标会有变化，然后让其他利益相关者也知道这些变化。")]),_._v(" "),a("p",[_._v("非技术因素的影响是客观存在的，而且从商业层面来说也是合理的，所以对于技术人来说要学会适应。")]),_._v(" "),a("p",[_._v("检查清单：")]),_._v(" "),a("ul",[a("li",[_._v("当非技术因素影响架构的重构时，你是否对目标做了调整并告知了利益相关各方？")]),_._v(" "),a("li",[_._v("你是否准备以开放而不是抵制的心态来对待非技术因素的影响？")])]),_._v(" "),a("h3",{attrs:{id:"_11、对于代码质量有所掌握"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11、对于代码质量有所掌握"}},[_._v("#")]),_._v(" 11、对于代码质量有所掌握")]),_._v(" "),a("p",[_._v("这和上文中所提到的“管理好技术债务”有异曲同工之处。")]),_._v(" "),a("p",[_._v("架构的重构对代码质量要求很高，一方面是重构过程对bug的容忍性比新产品的研发更低，另一方面也决定了下一次重构的难易程度。")]),_._v(" "),a("p",[_._v("关于代码质量的书籍和文章已经有很多，在这里只想提醒大家一点：代码审查是一个非常好的办法。代码审查是软件开发过程中的必要步骤，既可以帮助被审查者提到代码质量，又可以让审查者加深对产品的理解。不论团队多忙，一定要保证代码提交之前，是经过其他成员审核过的，短期来看会占用团队的时间，长期来看是事半功倍的好事。")]),_._v(" "),a("p",[_._v("检查清单：")]),_._v(" "),a("ul",[a("li",[_._v("团队成员是否对代码质量有足够的重视？是否有奖惩措施？")]),_._v(" "),a("li",[_._v("团队内部是否有代码质量的标准文档和审查流程？")])]),_._v(" "),a("h3",{attrs:{id:"_12、让团队做好准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12、让团队做好准备"}},[_._v("#")]),_._v(" 12、让团队做好准备")]),_._v(" "),a("p",[_._v("这是Raffi Krikorian列举的最后一条军规，是对之前所有建议的总结。")]),_._v(" "),a("h3",{attrs:{id:"结尾"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结尾"}},[_._v("#")]),_._v(" 结尾")]),_._v(" "),a("p",[_._v("关于架构的重构，Raffi Krikorian给了很好的建议，不过到底有没有效果，还是要实践中检验。尽信书不如无书，来源于实践中的经验是最有价值的，为技术人所用才有意义。")]),_._v(" "),a("h2",{attrs:{id:"reference"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[_._v("#")]),_._v(" Reference")]),_._v(" "),a("ol",[a("li",[_._v("《重构-改善既有代码的设计》")]),_._v(" "),a("li",[_._v("《程序员的职业素养》")]),_._v(" "),a("li",[_._v("《修改代码的艺术》")]),_._v(" "),a("li",[a("a",{attrs:{href:"https://www.infoq.cn/article/architect-12-rules-complete",target:"_blank",rel:"noopener noreferrer"}},[_._v("architect-12-rules-complete"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=r.exports}}]);