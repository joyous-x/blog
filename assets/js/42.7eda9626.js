(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{565:function(n,s,a){"use strict";a.r(s);var e=a(15),t=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"c-c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-c"}},[n._v("#")]),n._v(" C && C++")]),n._v(" "),a("h2",{attrs:{id:"基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[n._v("#")]),n._v(" 基础")]),n._v(" "),a("ul",[a("li",[n._v("c 和 c++ 标准, 定义了语法、语言特性 以及 C++ 内置库(也就是C++标准库)的实现规范, 但不同的编译器对标准库的实现方法各不一致")]),n._v(" "),a("li",[n._v("is-a(inheritance) && has-a(Composition)")]),n._v(" "),a("li",[n._v("多态")]),n._v(" "),a("li",[n._v("模版")]),n._v(" "),a("li",[n._v("异常")]),n._v(" "),a("li",[n._v("内存调优")]),n._v(" "),a("li",[n._v("性能调优")])]),n._v(" "),a("h2",{attrs:{id:"多态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[n._v("#")]),n._v(" 多态")]),n._v(" "),a("h3",{attrs:{id:"_1-虚函数表内存模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-虚函数表内存模型"}},[n._v("#")]),n._v(" 1. 虚函数表内存模型")]),n._v(" "),a("h3",{attrs:{id:"_2-方法派发-dispatch-流程-选择正确方法调用的过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-方法派发-dispatch-流程-选择正确方法调用的过程"}},[n._v("#")]),n._v(" 2. 方法派发(dispatch)流程(选择正确方法调用的过程)")]),n._v(" "),a("ul",[a("li",[n._v("派发机制按照选择正确方法的时期(编译期和运行期)，可以分为: static dispatch 和 dynamic dispatch\n"),a("ul",[a("li",[n._v("static dispatch\n"),a("ul",[a("li",[n._v("在编译期就完全确定调用方法的分派方式。也就是说，编译期直接决定函数地址(方法指针)，运行时可以直接通过函数地址调用方法。\n"),a("ul",[a("li",[n._v("static dispatch 的进行进一步优化的一种实现方式叫做内联(inline), 是指编译期从指定被调用的方法指针，改为将方法的实现平铺在调用方的可执行文件内，从而节省了指针到方法实现体的调用的消耗。\n"),a("ul",[a("li",[n._v("内联展开和宏展开的区别在于,内联发生在编译期,并且不会改变源文件.但是宏展开是在编译前就完成的,会改变源码本身,之后再对此进行编译.")]),n._v(" "),a("li",[n._v("inline 关键字是一个 desire 声明而非 require. 只能告诉编译器倾向使用内联方式, 但是最终实现是编译器决定的.\n"),a("ul",[a("li",[n._v("如果一个方法被内联10次,那么会出现10份方法的副本.所以内联适用于会被频繁调用的比较小的方法.但是如果一个方法特别大,被inline关键字修饰的话,编译器也可能会选择不使用内联实现.")])])])])])])])])]),n._v(" "),a("li",[n._v("dynamic dispatch\n"),a("ul",[a("li",[n._v("在运行期选择调用方法的实现的流程")]),n._v(" "),a("li",[n._v("虚函数表(动态分派的一种实现机制)\n"),a("ul",[a("li",[n._v("常见语言如 C++、Java 都是通过虚函数表来实现的(Java所有的实例方法都默认使用虚函数表实现)。")]),n._v(" "),a("li",[n._v("虚函数表\n"),a("ul",[a("li",[n._v("编译器会为每个类创建单独的虚函数表。编译器也会生成包含了虚函数表指针的代码。")]),n._v(" "),a("li",[n._v("多继承和指针修正(thunks)\n"),a("ul",[a("li",[n._v("菱形继承\n"),a("ul",[a("li",[n._v("虚基类")])])])])])])])])]),n._v(" "),a("li",[n._v("和 late binding 不同：\n"),a("ul",[a("li",[n._v("late binding (也叫dynamic binding或dynamic linkage)是一种用于处理在运行时通过对象调用方法或者通过函数名去调用包含参数的方法的一种编程机制.\n"),a("ul",[a("li",[n._v("简单的说，就是在编译期并不会解读足够的信息去确定方法是否存在")])])]),n._v(" "),a("li",[n._v("在组件对象模型编程中,使用late binding的最大优势在于,不要求编译器在编译期间去引用包含对象的库.这使得编译过程可以更有效的去避免类的虚函数表突然更改带来的冲突.")]),n._v(" "),a("li",[n._v("大部分的动态类型语言都可以在运行时去修改对象的方法列表, 因此他们就需要late binding.")])])])])])])])]),n._v(" "),a("h2",{attrs:{id:"模版"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模版"}},[n._v("#")]),n._v(" 模版")]),n._v(" "),a("ul",[a("li",[n._v("C++ 模板是图灵完备的\n"),a("ul",[a("li",[n._v("具备以下能力：编译期数值计算、类型计算、代码计算（如循环展开）")])])]),n._v(" "),a("li",[n._v("模版实例化、偏特化、偏特化(与函数的柯里化不同)...")]),n._v(" "),a("li",[n._v("可变模版参数（variadic templates）: C++11新增的最强大的特性之一")]),n._v(" "),a("li",[n._v("元编程")]),n._v(" "),a("li",[n._v("类型萃取\n"),a("ul",[a("li",[n._v("依赖模板的特化来实现")])])])]),n._v(" "),a("h2",{attrs:{id:"导入-import-导出-export"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#导入-import-导出-export"}},[n._v("#")]),n._v(" 导入(import)导出(export)")]),n._v(" "),a("h3",{attrs:{id:"_1-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-对象"}},[n._v("#")]),n._v(" 1. 对象")]),n._v(" "),a("ul",[a("li",[n._v("函数、接口、类、成员函数、成员变量")])]),n._v(" "),a("h3",{attrs:{id:"_2-使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用"}},[n._v("#")]),n._v(" 2. 使用")]),n._v(" "),a("ul",[a("li",[n._v("导出\n"),a("ul",[a("li",[n._v("模块定义文件(.def)")]),n._v(" "),a("li",[a("code",[n._v("__declspec(export)")]),n._v("、"),a("code",[n._v("__declspec(import)")])]),n._v(" "),a("li",[a("code",[n._v("visibility")]),n._v(" "),a("ul",[a("li",[n._v("代码修饰："),a("code",[n._v('__attribute((visibility("default")))')]),n._v("、"),a("code",[n._v('__attribute((visibility("hidden")))')])]),n._v(" "),a("li",[n._v("链接选项："),a("code",[n._v("-fvisibility=default")]),n._v("、"),a("code",[n._v("-fvisibility=hidden")]),n._v(" "),a("ul",[a("li",[n._v("gcc 默认设置为 default 即全部可见(导出)")])])])])])])]),n._v(" "),a("li",[n._v("加载\n"),a("ul",[a("li",[n._v("显式加载：从导出表获取函数地址(通过函数名、函数编号)，进行使用")]),n._v(" "),a("li",[n._v("隐式加载：依赖生成dll时生成的 lib 文件，直接引用头文件\n"),a("ul",[a("li",[n._v("lib 文件包含了导出的符号信息，会在模块被加载时主动寻找 dll或so 文件并关联其中对应的符号")]),n._v(" "),a("li",[a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("#ifdef _EXPORTING\n  #define API_DECLSPEC    __declspec(dllexport)\n#else\n  #define API_DECLSPEC    __declspec(dllimport)\n#endif\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("#ifdef _EXPORTING\n  #define API_DECLSPEC    __declspec(dllexport)\n#else\n  #define API_DECLSPEC    __declspec(dllimport)\n#endif\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),n._v("宏定义(You can use the same header file for both the DLL and the client application)："),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("#ifdef _EXPORTING\n  #define API_DECLSPEC    __declspec(dllexport)\n#else\n  #define API_DECLSPEC    __declspec(dllimport)\n#endif\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])])]),n._v(" "),a("li",[a("a",{attrs:{href:"https://docs.microsoft.com/en-us/cpp/build/importing-into-an-application-using-declspec-dllimport?view=msvc-170",target:"_blank",rel:"noopener noreferrer"}},[n._v("MSDN关于__declspec(dllimport)的解释"),a("OutboundLink")],1),n._v(" "),a("ul",[a("li",[a("em",[n._v("The keyword __declspec(dllimport) works whether you export with .def files or with the __declspec(dllexport) keyword.")])]),n._v(" "),a("li",[a("em",[n._v("Using __declspec(dllimport) is optional on function declarations, but the compiler produces more efficient code if you use this keyword.")])]),n._v(" "),a("li",[a("em",[n._v("However, you must use __declspec(dllimport) for the importing executable to access "),a("strong",[n._v("the DLL's public data symbols and objects.")])])])])]),n._v(" "),a("li",[n._v("示例："),a("em",[n._v("假设 func 是 DLL 中的一个函数，在另一个程序的 main 函数中尝试调用 DLL 中的的这个函数")]),n._v(" "),a("ul",[a("li",[a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("编译器将产生类似这样的调用:\n  call func\n然后，链接器把该调用翻译为类似这样的代码：\n  call 0x40000001       // 0x40000001是 func 的地址\n并且，链接器将产生一个 Thunk，形如：\n  0x40000001: jmp DWORD PTR __imp_func\n\n这里的 imp_func 是 func 函数在 exe 的导入地址表中的函数槽的地址。然后，加载器只需要在加载时更新 exe 的导入地址表(导入表修复)即可\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("编译器将产生类似这样的调用:\n  call func\n然后，链接器把该调用翻译为类似这样的代码：\n  call 0x40000001       // 0x40000001是 func 的地址\n并且，链接器将产生一个 Thunk，形如：\n  0x40000001: jmp DWORD PTR __imp_func\n\n这里的 imp_func 是 func 函数在 exe 的导入地址表中的函数槽的地址。然后，加载器只需要在加载时更新 exe 的导入地址表(导入表修复)即可\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br")])]),n._v("如果导入的头文件中函数"),a("strong",[n._v("没有")]),n._v("__declspec(dllimport)的修饰"),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("编译器将产生类似这样的调用:\n  call func\n然后，链接器把该调用翻译为类似这样的代码：\n  call 0x40000001       // 0x40000001是 func 的地址\n并且，链接器将产生一个 Thunk，形如：\n  0x40000001: jmp DWORD PTR __imp_func\n\n这里的 imp_func 是 func 函数在 exe 的导入地址表中的函数槽的地址。然后，加载器只需要在加载时更新 exe 的导入地址表(导入表修复)即可\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br")])])]),n._v(" "),a("li",[a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("链接器将不会产生 Thunk(如果不被要求的话)，而直接产生一个间接调用。形如：\n  call DWORD PTR __imp_func1\n因此，显示地导入函数能有效减少目标代码、增加执行效率(因为不产生Thunk)。\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("链接器将不会产生 Thunk(如果不被要求的话)，而直接产生一个间接调用。形如：\n  call DWORD PTR __imp_func1\n因此，显示地导入函数能有效减少目标代码、增加执行效率(因为不产生Thunk)。\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),n._v("如果使用了__declspec(dllimport)显示地导入函数"),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("链接器将不会产生 Thunk(如果不被要求的话)，而直接产生一个间接调用。形如：\n  call DWORD PTR __imp_func1\n因此，显示地导入函数能有效减少目标代码、增加执行效率(因为不产生Thunk)。\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])])])])])])])])]),n._v(" "),a("li",[n._v("注意\n"),a("ul",[a("li",[n._v("类、成员函数、成员变量 导出时的对象归属问题")])])])]),n._v(" "),a("h3",{attrs:{id:"_3-名称修饰-符号名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-名称修饰-符号名"}},[n._v("#")]),n._v(" 3. 名称修饰(符号名)")]),n._v(" "),a("ul",[a("li",[n._v("查看方法：\n"),a("ul",[a("li",[n._v("Linux\n"),a("ul",[a("li",[n._v("gcc 编译，而后以 "),a("strong",[n._v("nm")]),n._v(" 命令查看动态、静态库以及"),a("code",[n._v(".o")]),n._v("中的符号")])])]),n._v(" "),a("li",[n._v("Window\n"),a("ul",[a("li",[n._v("cl 编译(参数"),a("code",[n._v("-c")]),n._v(")，而后以 "),a("strong",[n._v("dumpbin")]),n._v(" 命令查看符号(参数"),a("code",[n._v("/SYMBOLS")]),n._v(")")])])])])]),n._v(" "),a("li",[n._v("注意\n"),a("ul",[a("li",[n._v("不同的编译器的名称修饰方法可能不同，所以不同的编译器对于同一个函数签名可能对应不同的修饰后名称")]),n._v(" "),a("li",[n._v("模块定义文件(.def) 定义的函数，不会使用名称修饰，而是保持函数名不变")]),n._v(" "),a("li",[n._v("Microsoft 提供了一个 UnDecorateSymbolName() 的API，可以将修饰后名称转换成函数签名")]),n._v(" "),a("li",[n._v('VC 提供了一个预处理指示符 "#pragma" 来指定连接选项, 其中有：\n'),a("ul",[a("li",[a("code",[n._v("/EXPORT:entryname[,@ordinal[,NONAME]][,DATA]")]),n._v("，@ordinal 指定顺序；NONAME 指定只将函数导出为序号；DATA 关键字指定导出项为数据项\n"),a("ul",[a("li",[n._v("用于修改导出的名称，如："),a("code",[n._v('#pragma comment(linker,"/EXPORT:MyExportFunction=_MyExportFunction@4")')])])])])])])])]),n._v(" "),a("li",[n._v("C 编译器的函数名修饰规则\n"),a("ul",[a("li",[n._v("Visual C++ 的基本C名称修饰方法：")])]),n._v(" "),a("ul",[a("li",[a("code",[n._v("__stdcall")]),n._v(" x86 调用约定，编译器会在输出函数名前加上一个下划线前缀，函数名后面加上一个“@”符号和其參数的字节数。比如 "),a("code",[n._v("_functionname@argbytes")])]),n._v(" "),a("li",[a("code",[n._v("__fastcall")]),n._v(' x86 调用约定，在输出函数名前加上一个"@"符号，后面也是一个"@"符号和其參数的字节数，比如 '),a("code",[n._v("@functionname@argbytes")])]),n._v(" "),a("li",[a("code",[n._v("__stdcall")]),n._v(" x64 和 "),a("code",[n._v("__fastcall")]),n._v(" x64 调用约定，保持输出函数名不变，比如"),a("code",[n._v("functionname")])]),n._v(" "),a("li",[a("code",[n._v("__cdecl")]),n._v(" 同 GCC")])]),n._v(" "),a("ul",[a("li",[n._v("GCC 的基本C名称修饰方法：\n"),a("ul",[a("li",[a("code",[n._v("__cdecl")]),n._v(" x86 调用约定，仅在输出函数名前加上一个下划线前缀。比如"),a("code",[n._v("_functionname")])]),n._v(" "),a("li",[a("code",[n._v("__cdecl")]),n._v(" x64 调用约定，保持输出函数名不变。比如"),a("code",[n._v("functionname")])])])])])]),n._v(" "),a("li",[n._v("C++ 编译器的名称修饰规则\n"),a("ul",[a("li",[n._v("Visual C++ 的基本C++名称修饰方法：\n"),a("ul",[a("li",[n._v("形如："),a("code",[n._v("?func_name@class_name@namespace@@flags_and_args_and_return@Z")]),n._v(', 修饰后名字由"?"开头，接着是函数名由"@"符号结尾的函数名；后面跟着由"@"结尾的类名和名称空间，再一个"@"表示函数的名称空间结束；其后可能有，函数调用类型(__cdecl或__stdcall等)、函数保护属性(public、private...) 以及 参数列表等信息，由"@"结束，最后由"Z"结尾。\n'),a("ul",[a("li",[n._v("比如 int C::C2::func(int) 经过名称修饰以后就是 ?func@C2@C@@AAEHH@Z")])])])])]),n._v(" "),a("li",[n._v("GCC 的基本C++名称修饰方法：\n"),a("ul",[a("li",[n._v('所有的符号都以"_Z"开头，对于嵌套的名字（在名称空间或在类里面的），后面紧跟"N"，然后是各个名称空间和类的名字，每个名字前是名字字符串长度，再以"E"结尾。对于一个函数来说，它的参数列表紧跟在"E"后面。\n'),a("ul",[a("li",[n._v('比如 N::C::func 经过名称修饰以后就是 _ZN1N1C4funcE。N::C::func(int) 函数签名经过修饰为 _ZN1N1C4funcEi, 对于int类型来说，就是字母"i"。')])])])])])])])]),n._v(" "),a("h2",{attrs:{id:"特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[n._v("#")]),n._v(" 特性")]),n._v(" "),a("ul",[a("li",[n._v("右值引用\n"),a("ul",[a("li",[n._v("std::move、std::forward")])])]),n._v(" "),a("li",[n._v("const\n"),a("ul",[a("li",[n._v("指针：位于*的左侧 或 右侧")]),n._v(" "),a("li",[n._v("成员变量")]),n._v(" "),a("li",[n._v("成员函数\n"),a("ul",[a("li",[n._v("不被允许修改它所在对象的任何一个数据成员(但可以访问)")]),n._v(" "),a("li",[n._v("const成员函数，可以访问const成员函数")])])]),n._v(" "),a("li",[n._v("对象\n"),a("ul",[a("li",[n._v("该对象的任何非const成员函数都不能被调用，因为任何非const成员函数会有修改成员变量的企图")])])]),n._v(" "),a("li",[a("em",[n._v("const_cast<type_id> (expression)")])]),n._v(" "),a("li",[a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("  #if defined(__GCC__)\n  /*\n  * __attribute__ 是 GCC 编译器特有的机制\n  * 如，__attribute__((packed)) 和 __attribute__(aligned(4))\n  * \n  * 使用：\n  *   typedef struct {\n  *   } __attribute__((packed)) position_t;\n  * \n  *   struct test {\n  *   } __attribute__((packed));\n  */\n  #endif\n  对齐方式还有：\n  #if ( _MSC_VER >= 800 && !defined(_M_I86)) || defined(_PUSHPOP_SUPPORTED)\n    #pragma pack(push,1)\n  #else\n    #pragma pack(1)\n  #endif\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("  #if defined(__GCC__)\n  /*\n  * __attribute__ 是 GCC 编译器特有的机制\n  * 如，__attribute__((packed)) 和 __attribute__(aligned(4))\n  * \n  * 使用：\n  *   typedef struct {\n  *   } __attribute__((packed)) position_t;\n  * \n  *   struct test {\n  *   } __attribute__((packed));\n  */\n  #endif\n  对齐方式还有：\n  #if ( _MSC_VER >= 800 && !defined(_M_I86)) || defined(_PUSHPOP_SUPPORTED)\n    #pragma pack(push,1)\n  #else\n    #pragma pack(1)\n  #endif\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br")])]),n._v("attribute"),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("  #if defined(__GCC__)\n  /*\n  * __attribute__ 是 GCC 编译器特有的机制\n  * 如，__attribute__((packed)) 和 __attribute__(aligned(4))\n  * \n  * 使用：\n  *   typedef struct {\n  *   } __attribute__((packed)) position_t;\n  * \n  *   struct test {\n  *   } __attribute__((packed));\n  */\n  #endif\n  对齐方式还有：\n  #if ( _MSC_VER >= 800 && !defined(_M_I86)) || defined(_PUSHPOP_SUPPORTED)\n    #pragma pack(push,1)\n  #else\n    #pragma pack(1)\n  #endif\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br")])])])])]),n._v(" "),a("li",[a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    #include <iostream>\n    class HeapOnly {\n    public:  \n        HeapOnly() { }\n        void destroy() const { delete this; }\n    private:  \n        ~HeapOnly() { }\n    };\n    class StackOnly {\n    public:\n        StackOnly() { }\n        ~StackOnly() { }\n    private:\n        void* operator new(size_t);\n    };\n    int main() {  \n        StackOnly s; // ok\n        StackOnly *p = new StackOnly; // wrong\n        HeapOnly *p = new HeapOnly; // ok\n        p->destroy();\n        HeapOnly h;  // wrong\n        return 0;\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    #include <iostream>\n    class HeapOnly {\n    public:  \n        HeapOnly() { }\n        void destroy() const { delete this; }\n    private:  \n        ~HeapOnly() { }\n    };\n    class StackOnly {\n    public:\n        StackOnly() { }\n        ~StackOnly() { }\n    private:\n        void* operator new(size_t);\n    };\n    int main() {  \n        StackOnly s; // ok\n        StackOnly *p = new StackOnly; // wrong\n        HeapOnly *p = new HeapOnly; // ok\n        p->destroy();\n        HeapOnly h;  // wrong\n        return 0;\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br")])]),n._v("HeapOnly 和 StackOnly"),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    #include <iostream>\n    class HeapOnly {\n    public:  \n        HeapOnly() { }\n        void destroy() const { delete this; }\n    private:  \n        ~HeapOnly() { }\n    };\n    class StackOnly {\n    public:\n        StackOnly() { }\n        ~StackOnly() { }\n    private:\n        void* operator new(size_t);\n    };\n    int main() {  \n        StackOnly s; // ok\n        StackOnly *p = new StackOnly; // wrong\n        HeapOnly *p = new HeapOnly; // ok\n        p->destroy();\n        HeapOnly h;  // wrong\n        return 0;\n    }\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br")])])])])])}),[],!1,null,null,null);s.default=t.exports}}]);