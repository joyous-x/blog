(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{654:function(n,a,e){"use strict";e.r(a);var s=e(15),t=Object(s.a)({},(function(){var n=this,a=n.$createElement,e=n._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"go"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#go"}},[n._v("#")]),n._v(" Go")]),n._v(" "),e("ul",[e("li",[e("p",[n._v("类型")]),n._v(" "),e("ul",[e("li",[n._v("(u)int(8|16|32|64)、bool、string、uintptr、byte(=uint8)、rune(=uint32)、float[32|64]、complex[64|128]")]),n._v(" "),e("li",[n._v("chan、interface、func")]),n._v(" "),e("li",[n._v("array、slice、map")])])]),n._v(" "),e("li",[e("p",[n._v("关键字")]),n._v(" "),e("ul",[e("li",[n._v("概览"),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("reserved-keywords:25\n    package\timport\tstruct\tinterface\tconst\tmap\ttype\tfunc\t\n    if\telse\tfor\tswitch\tselect\tbreak\tcontinue\tgoto\n    return\tfallthrough\tcase\tdefault\tdefer\trange\tgo\tchan\tvar\n预定义标识符：内嵌函数和数据类型等\n    append\tiota\tlen\tcap\tmake\tnew\tcopy\ttrue\tfalse nil\n    close\timag\tprint\tprintln\tpanic\treal\trecover\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br")])])]),n._v(" "),e("li",[n._v("range\n"),e("ul",[e("li",[n._v("作用于 string or map，可以返回系列 (key, value)")])])]),n._v(" "),e("li",[n._v("fallthrough\n"),e("ul",[e("li",[n._v("在 switch case 中强制执行后面的 case 代码")])])]),n._v(" "),e("li",[n._v("chan"),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("chonlyread := make(<-chan int) //创建只读channel \nchonlywrite := make(chan<- int) //创建只写channel    \n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br")])])]),n._v(" "),e("li",[n._v("defer\n"),e("ul",[e("li",[n._v("当函数返回时，会执行defer语句，即使触发异常也会走defer语句；如果有多个defer语句，则按 first-in-last-out 的顺序依次执行；")]),n._v(" "),e("li",[n._v("defer语句中的变量，在defer声明时确定变量")])])]),n._v(" "),e("li",[n._v("func\n"),e("ul",[e("li",[n._v("不支持重载，一个包不能有两个名字一样的函数")]),n._v(" "),e("li",[n._v("命名返回值的名字（return可以不指定变量名）"),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("func add(a, b int) (c int) {\n        c = a + b\n        return\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br")])])])])])])]),n._v(" "),e("li",[e("p",[n._v("值传递 & 引用传递")]),n._v(" "),e("ul",[e("li",[n._v("map、slice、chan、指针、interface默认以引用的方式传递")]),n._v(" "),e("li",[n._v("分配内存\n"),e("ul",[e("li",[n._v("new 主要用来分配值类型，比如 int、struct、array，返回的是指针")]),n._v(" "),e("li",[n._v("make 主要用来分配引用类型，比如 chan、map、slice")])])]),n._v(" "),e("li",[n._v("array : 值类型, 当作为方法的入参传入时将复制一份数组而不是引用同一指针")]),n._v(" "),e("li",[n._v("slice : 引用类型, 在传递切片时，等同于传递了一指针")])])]),n._v(" "),e("li",[e("p",[n._v("可变参数")]),n._v(" "),e("ul",[e("li",[n._v("可变参数实际上是一个slice，可以通过arg[index]依次访问所有参数；通过len(arg)来判断变参的个数"),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("func concat(s string, arg ...string) string {\n    str := s\n    for i := 0; i < len(arg); i++ { str += arg[i] }\n    return str\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br")])])])])]),n._v(" "),e("li",[e("p",[n._v("closure")]),n._v(" "),e("ul",[e("li",[n._v("闭包是一个函数和与其相关的引用环境组合而成的实体")]),n._v(" "),e("li",[n._v("函数可以存储到变量中作为参数传递给其它函数，能够被函数动态的创建和返回"),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("func Adder() func(int) int {\n    var x int\n    return func(d int) int {\n        x += d\n        return x\n    }\n}\nf := Adder()\nfmt.Println(f(1))    //1\nfmt.Println(f(10))   //11\nfmt.Println(f(100))  //111\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br")])])])])]),n._v(" "),e("li",[e("p",[n._v("程序初始化与执行过程")]),n._v(" "),e("ul",[e("li",[n._v("程序的初始化和执行都起于main包, 编译时将依赖的包依次导入")]),n._v(" "),e("li",[n._v("流程：\n"),e("ul",[e("li",[n._v("包初始化时，会先逐层递归的将它依赖的包导入进来，直到顶层包。")]),n._v(" "),e("li",[n._v("然后对顶层包中的包级常量和变量进行初始化，接着执行init函数（如果有的话），依次类推，直到最外层包被初始化。")]),n._v(" "),e("li",[n._v("等所有被导入的包加载完毕，就开始对main包中的包级常量和变量进行初始化，然后执行main包中的init函数（如果存在的话），最后执行main函数。")])])]),n._v(" "),e("li",[n._v("注意\n"),e("ul",[e("li",[n._v("init()可以在任何package中出现(可选); main()只能用在package main 中(必需)")]),n._v(" "),e("li",[n._v("如果一个包会被多个包同时导入，那么它只会被导入一次")])])])])]),n._v(" "),e("li",[e("p",[n._v("reflect")]),n._v(" "),e("ul",[e("li",[n._v("reflect.Value.NumField()，获取结构体中字段的个数")]),n._v(" "),e("li",[n._v("reflect.Value.Method(n).Call(nil)，调用结构体中的方法")]),n._v(" "),e("li",[n._v("reflect.TypeOf，返回一个Type类型值")]),n._v(" "),e("li",[n._v("reflect.Value.Kind，返回一个常量，表示变量的类别")]),n._v(" "),e("li",[n._v("reflect.ValueOf，返回一个Value类型值，该值代表运行时的数据\n"),e("ul",[e("li",[n._v("SetXX(x) 因为传递的是x的副本，所以SetXX不能够改x，要改动x必须向函数传递x的指针")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('//> SetInt、SetFloat、SetString\n\n//错误代码！！！\n//panic: reflect: reflect.Value.SetFloat using unaddressable value\nfunc main() {\n    var a float64\n    fv := reflect.ValueOf(&a)\n    fv.SetFloat(520.00)\n}\n//正确的，传指针\nfunc main() {\n    var a2 float64\n    fv2 := reflect.ValueOf(&a2)\n    fv2.Elem().SetFloat(520.00)\n    fmt.Printf("%v\\n", a2)    //520\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br")])])])])])])])}),[],!1,null,null,null);a.default=t.exports}}]);