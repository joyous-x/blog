(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{595:function(n,s,t){"use strict";t.r(s);var a=t(14),i=Object(a.a)({},(function(){var n=this,s=n.$createElement,t=n._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h4",{attrs:{id:"定义常量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义常量"}},[n._v("#")]),n._v(" 定义常量")]),n._v(" "),t("h4",{attrs:{id:"指针使用const"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指针使用const"}},[n._v("#")]),n._v(" 指针使用CONST")]),n._v(" "),t("ul",[t("li",[n._v("如果const位于*的左侧，则const就是用来修饰指针所指向的变量，即指针指向为常量；")]),n._v(" "),t("li",[n._v("如果const位于*的右侧，const就是修饰指针本身，即指针本身是常量。")])]),n._v(" "),t("h4",{attrs:{id:"类相关const"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类相关const"}},[n._v("#")]),n._v(" 类相关CONST")]),n._v(" "),t("ul",[t("li",[n._v("修饰成员变量\n"),t("ul",[t("li",[n._v("表示成员常量不能被修改，同时它只能在初始化列表中赋值")])])]),n._v(" "),t("li",[n._v("修饰成员函数\n"),t("ul",[t("li",[n._v("不被允许修改它所在对象的任何一个数据成员(但可以访问)")]),n._v(" "),t("li",[n._v("const成员函数，可以访问const成员函数")])])])]),n._v(" "),t("h4",{attrs:{id:"const修饰类对象-对象指针-对象引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#const修饰类对象-对象指针-对象引用"}},[n._v("#")]),n._v(" const修饰类对象/对象指针/对象引用")]),n._v(" "),t("ul",[t("li",[n._v("const修饰类对象表示该对象为常量对象，其中的任何成员都不能被修改。对于对象指针和对象引用也是一样。")]),n._v(" "),t("li",[n._v("const修饰的对象，该对象的任何非const成员函数都不能被调用，因为任何非const成员函数会有修改成员变量的企图。")]),n._v(" "),t("li")]),n._v(" "),t("h4",{attrs:{id:"去除const"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#去除const"}},[n._v("#")]),n._v(" 去除CONST")]),n._v(" "),t("ul",[t("li",[n._v("用法：const_cast<type_id> (expression)")]),n._v(" "),t("li",[n._v("该运算符用来修改类型的const或volatile属性。除了const 或volatile修饰之外， type_id和expression的类型是一样的。\n"),t("ul",[t("li",[n._v("常量指针被转化成非常量指针，并且仍然指向原来的对象；")]),n._v(" "),t("li",[n._v("常量引用被转换成非常量引用，并且仍然指向原来的对象；")]),n._v(" "),t("li",[n._v("常量对象被转换成非常量对象。")])])]),n._v(" "),t("li",[n._v("type_id 必须为(const修饰的类型的)指针或引用")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('int _tmain(int argc, _TCHAR* argv[])\n{\n    const int a = 0;\n    const int *p0 = &a;\n    int b = 1;\n    int *const p1 = &b;\n \n    int c = const_cast<int&>(a);\n    printf("%lu, %lu \\n", &c, &a);\n    int& d = const_cast<int&>(a);\n    printf("%lu, %lu \\n", &d, &a);\n    d = 3;\n    //未关闭编译器优化时，输出的a为0，因为a的原始类型为const int，\n    //对于常量编译器在编译期间就已经将变量替换为值;实际上运行到此处时a=3\n    printf("d=%lu, a=%lu \\n\\n", d, a);  \n    \n    int* p12 = const_cast<int*&>(p1);\n    printf("%lu, %lu \\n", &p1, &p12);\n    *p12 = 8;\n    printf("b=%lu \\n\\n", b);\n    int*& p13 = const_cast<int*&>(p1);\n    printf("%lu, %lu \\n", &p1, &p13);\n    *p13 = 9;\n    printf("b=%lu \\n\\n", b);\n \n    int* p02 = const_cast<int*>(p0);\n    printf("%lu, %lu \\n", &p0, &p02);\n    int*& p03 = p02; // 合法操作\n    //  int*& p03 = const_cast<int*>(p0); // 非法操作 ？？？原因未知！！！因为 int*& p03 = p02 都能成功啊\n    //  printf("%lu, %lu \\n", &p0, &p03);\n    return 0;\n｝\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br")])])])}),[],!1,null,null,null);s.default=i.exports}}]);